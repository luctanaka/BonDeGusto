const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('../models/User');
const Unit = require('../models/Unit');
require('dotenv').config();

const createUsers = async () => {
  try {
    // Conectar ao MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://lucasmtanaka:bondegusto2024@cluster0.mglbuhf.mongodb.net/test?retryWrites=true&w=majority&appName=Cluster0');
    console.log('‚úÖ Conectado ao MongoDB');

    // Buscar ou criar uma unidade
    let unit = await Unit.findOne({ name: 'Bondegusto - Matriz' });
    if (!unit) {
      unit = new Unit({
        name: 'Bondegusto - Matriz',
        displayName: 'Bondegusto - Matriz',
        address: 'Endere√ßo da Matriz',
        phone: '(11) 99999-9999'
      });
      await unit.save();
      console.log('Unidade criada:', unit.name);
    }

    const unitToUse = unit || await Unit.findOne();

    // Dados dos usu√°rios
    const usersData = [
      {
        name: 'Maria Eduarda Lima',
        username: 'maria.eduarda',
        email: 'maria.eduarda@bondegusto.com',
        password: 'senha123',
        phone: '+5511987654321',
        unit: unitToUse._id,
        isAdmin: false,
        isActive: true
      },
      {
        name: 'Jo√£o Paulo',
        username: 'joao.paulo',
        email: 'joao.paulo@bondegusto.com',
        password: 'senha123',
        phone: '+5511987651234',
        unit: unitToUse._id,
        isAdmin: false,
        isActive: true
      }
    ];

    // Criar os usu√°rios
    for (const userData of usersData) {
      // Verificar se o usu√°rio j√° existe
      const existingUser = await User.findOne({
        $or: [
          { email: userData.email },
          { username: userData.username }
        ]
      });

      if (existingUser) {
        console.log(`‚ö†Ô∏è  Usu√°rio ${userData.name} j√° existe`);
        continue;
      }

      // Garantir que createdBy seja definido
      userData.createdBy = unitToUse._id;

      // Criar o usu√°rio (a senha ser√° criptografada automaticamente pelo middleware pre-save)
      const user = new User(userData);
      await user.save();
      
      console.log(`‚úÖ Usu√°rio criado: ${userData.name}`);
      console.log(`   - Email: ${userData.email}`);
      console.log(`   - Username: ${userData.username}`);
      console.log(`   - Unidade: ${unitToUse.name}`);
      console.log(`   - Senha: senha123`);
      console.log('');
    }

    console.log('üéâ Todos os usu√°rios foram criados com sucesso!');
    console.log('\nüìã Resumo dos usu√°rios criados:');
    console.log('1. Maria Eduarda Lima (maria.eduarda@bondegusto.com / maria.eduarda)');
    console.log('2. Jo√£o Paulo (joao.paulo@bondegusto.com / joao.paulo)');
    console.log('\nüîë Senha padr√£o para ambos: senha123');
    
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rios:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Desconectado do MongoDB');
    process.exit(0);
  }
};

createUsers();